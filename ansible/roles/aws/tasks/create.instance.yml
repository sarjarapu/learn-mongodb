---
- name: check if AWS EC2 instance already exists
  ec2_remote_facts:
    region: "{{ aws_region }}"
    filters:
      instance-state-name: running
      "tag:Name": "{{ rs_item }}"
  register: ec2_facts_output

- name: display the output of ec2_remote_facts
  debug: msg="created EC2 instance - '{{ ec2_facts_output }}'"

- name: display debug information, if instance already exists
  debug: msg="found Name {{ rs_item }}; instance-id {{ ec2_facts_output.instances.0.id }}  "
  when: ec2_facts_output.instances.0 is defined

- name: display debug information, if instance is not already created
  debug: msg="found no instance by Name {{ rs_item }}; creating a new one"
  when: ec2_facts_output.instances.0 is undefined

- name: if not exists already, create an AWS EC2 instance
  when: ec2_facts_output.instances.0 is undefined
  ec2:
     key_name: "{{ aws_security_key }}"
     region: "{{ aws_region }}"
     zone: "{{ aws_availability_zone }}"
     group: "{{ aws_security_group }}"
     instance_type: "{{ aws_instance_type }}"
     image: "{{ aws_ami }}"
     wait: yes
     instance_tags:
       "Name": "{{ rs_item }}"
       "owner": "{{ aws_tag_owner }}"
       "expire-on": "{{ aws_tag_expireon }}"
     count: 1
     volumes:
       - device_name: /dev/sda1
         volume_type: gp2
         volume_size: 10
         delete_on_termination: true
       - device_name: /dev/xvdb
         volume_type: gp2
         volume_size: 30
         delete_on_termination: true
  register: ec2_output

- name: set the create_output output variable if instance is NOT created
  set_fact:
     create_output: "{{ ec2_output }}"
  when: ec2_facts_output.instances.0 is undefined

- name: set the create_output output variable if an instance is created
  set_fact:
     create_output: "{{ ec2_facts_output }}"
  when: ec2_facts_output.instances.0 is defined

# - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
#   local_action: lineinfile 
#                 dest="../../hosts" 
#                 regexp={{ item.public_ip }} 
#                 insertafter="[{{ server_group_name }}]" line={{ item.public_ip }}
#   with_items: {{ create_output.instances }} 
